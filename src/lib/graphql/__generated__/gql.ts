/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query ProductsExample(\n    $first: Int!\n    $after: String\n    $channel: String!\n    $filter: ProductFilterInput\n    $sortBy: ProductOrder\n  ) {\n    products(\n      first: $first\n      after: $after\n      channel: $channel\n      filter: $filter\n      sortBy: $sortBy\n    ) {\n      edges {\n        node {\n          id\n          name\n          slug\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.ProductsExampleDocument,
    "\n  mutation TokenAuth($email: String!, $password: String!) {\n    tokenCreate(email: $email, password: $password) {\n      token\n      refreshToken\n      errors {\n        field\n        message\n      }\n      user {\n        id\n        email\n        firstName\n        lastName\n        isActive\n      }\n    }\n  }\n": typeof types.TokenAuthDocument,
    "\n  mutation RegisterAccount(\n    $input: AccountRegisterInput!\n  ) {\n    accountRegister(\n      input: $input\n    ) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        isActive\n      }\n      errors {\n        field\n        message\n        code\n      }\n    }\n  }\n": typeof types.RegisterAccountDocument,
    "\n  query CurrentUser {\n    me {\n      id\n      email\n      firstName\n      lastName\n      isActive\n    }\n  }\n": typeof types.CurrentUserDocument,
    "\n  query Categories($first: Int!, $channel: String!) {\n    categories(first: $first, level: 0) {\n      edges {\n        node {\n          id\n          name\n          slug\n          description\n          parent {\n            id\n          }\n          backgroundImage {\n            url\n            alt\n          }\n          children(first: 100) {\n            edges {\n              node {\n                id\n                name\n                slug\n                description\n                parent {\n                  id\n                }\n                backgroundImage {\n                  url\n                  alt\n                }\n                products(first: 0, channel: $channel) {\n                  totalCount\n                }\n              }\n            }\n            totalCount\n          }\n          products(first: 0, channel: $channel) {\n            totalCount\n          }\n        }\n      }\n      totalCount\n    }\n  }\n": typeof types.CategoriesDocument,
    "\n  query CategoryBySlug($slug: String!, $channel: String!) {\n    category(slug: $slug) {\n      id\n      name\n      slug\n      description\n      backgroundImage {\n        url\n        alt\n      }\n      ancestors(first: 5) {\n        edges {\n          node {\n            id\n            name\n            slug\n          }\n        }\n      }\n      children(first: 100) {\n        edges {\n          node {\n            id\n            name\n            slug\n            description\n            backgroundImage {\n              url\n              alt\n            }\n            products(first: 0, channel: $channel) {\n              totalCount\n            }\n          }\n        }\n        totalCount\n      }\n      products(first: 0, channel: $channel) {\n        totalCount\n      }\n    }\n  }\n": typeof types.CategoryBySlugDocument,
    "\n  query CategoryById($id: ID!, $channel: String!) {\n    category(id: $id) {\n      id\n      name\n      slug\n      description\n      backgroundImage {\n        url\n        alt\n      }\n      parent {\n        id\n        name\n        slug\n      }\n      children(first: 100) {\n        edges {\n          node {\n            id\n            name\n            slug\n            description\n            products(first: 0, channel: $channel) {\n              totalCount\n            }\n          }\n        }\n        totalCount\n      }\n      products(first: 0, channel: $channel) {\n        totalCount\n      }\n    }\n  }\n": typeof types.CategoryByIdDocument,
    "\n  query GetChannel($slug: String!) {\n    channel(slug: $slug) {\n      id\n      name\n      slug\n      currencyCode\n      defaultCountry {\n        code\n        country\n      }\n    }\n  }\n": typeof types.GetChannelDocument,
    "\n  query UserFavorites {\n    me {\n      id\n      metadata {\n        key\n        value\n      }\n    }\n  }\n": typeof types.UserFavoritesDocument,
    "\n  mutation UpdateUserMetadata($id: ID!, $input: [MetadataInput!]!) {\n    updateMetadata(id: $id, input: $input) {\n      item {\n        ... on User {\n          id\n          metadata {\n            key\n            value\n          }\n        }\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n": typeof types.UpdateUserMetadataDocument,
    "\n  query UserOrders($first: Int!) {\n    me {\n      orders(first: $first) {\n        edges {\n          node {\n            id\n            number\n            created\n            status\n            total {\n              gross {\n                amount\n                currency\n              }\n            }\n            lines {\n              id\n              productName\n              productSku\n              quantity\n              unitPrice {\n                gross {\n                  amount\n                  currency\n                }\n              }\n              thumbnail {\n                url\n                alt\n              }\n            }\n            shippingAddress {\n              firstName\n              lastName\n              streetAddress1\n              streetAddress2\n              city\n              countryArea\n              postalCode\n              country {\n                code\n                country\n              }\n              phone\n            }\n            paymentStatus\n            payments {\n              id\n              gateway\n              paymentMethodType\n              chargeStatus\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  }\n": typeof types.UserOrdersDocument,
    "\n  query OrderById($id: ID!) {\n    order(id: $id) {\n      id\n      number\n      created\n      status\n      shippingAddress {\n        firstName\n        lastName\n        streetAddress1\n        streetAddress2\n        city\n        countryArea\n        postalCode\n        country {\n          code\n          country\n        }\n        phone\n      }\n      billingAddress {\n        firstName\n        lastName\n        streetAddress1\n        streetAddress2\n        city\n        countryArea\n        postalCode\n        country {\n          code\n          country\n        }\n        phone\n      }\n      total {\n        gross {\n          amount\n          currency\n        }\n      }\n      subtotal {\n        gross {\n          amount\n          currency\n        }\n      }\n      shippingPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n      payments {\n        id\n        gateway\n        paymentMethodType\n        chargeStatus\n        creditCard {\n          brand\n          lastDigits\n          expMonth\n          expYear\n        }\n      }\n      lines {\n        id\n        productName\n        variantName\n        quantity\n        thumbnail {\n          url\n          alt\n        }\n        unitPrice {\n          gross {\n            amount\n            currency\n          }\n        }\n        totalPrice {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n    }\n  }\n": typeof types.OrderByIdDocument,
    "\n  query Products(\n    $first: Int!\n    $after: String\n    $channel: String!\n    $filter: ProductFilterInput\n    $sortBy: ProductOrder\n  ) {\n    products(\n      first: $first\n      after: $after\n      channel: $channel\n      filter: $filter\n      sortBy: $sortBy\n    ) {\n      edges {\n        node {\n          id\n          name\n          description\n          slug\n          thumbnail {\n            url\n            alt\n          }\n          pricing {\n            priceRange {\n              start {\n                gross {\n                  amount\n                  currency\n                }\n              }\n            }\n          }\n          category {\n            id\n            name\n            slug\n          }\n          attributes {\n            attribute {\n              name\n              slug\n            }\n            values {\n              name\n              slug\n            }\n          }\n          variants {\n            id\n            name\n            quantityAvailable\n            attributes {\n              attribute {\n                name\n                slug\n              }\n              values {\n                name\n                slug\n              }\n            }\n          }\n          isAvailable\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.ProductsDocument,
    "\n  query ProductById($id: ID!, $channel: String!) {\n    product(id: $id, channel: $channel) {\n      id\n      name\n      description\n      slug\n      thumbnail {\n        url\n        alt\n      }\n      media {\n        url\n        alt\n        type\n      }\n      pricing {\n        priceRange {\n          start {\n            gross {\n              amount\n              currency\n            }\n          }\n        }\n      }\n      category {\n        id\n        name\n        slug\n      }\n      attributes {\n        attribute {\n          name\n          slug\n        }\n        values {\n          name\n          slug\n        }\n      }\n      variants {\n        id\n        name\n        quantityAvailable\n        attributes {\n          attribute {\n            name\n            slug\n          }\n          values {\n            name\n            slug\n          }\n        }\n      }\n      isAvailable\n    }\n  }\n": typeof types.ProductByIdDocument,
    "\n  query ProductBySlug($slug: String!, $channel: String!) {\n    product(slug: $slug, channel: $channel) {\n      id\n      name\n      description\n      slug\n      thumbnail {\n        url\n        alt\n      }\n      media {\n        url\n        alt\n        type\n      }\n      attributes {\n        attribute {\n          name\n          slug\n        }\n        values {\n          name\n          slug\n        }\n      }\n      metadata {\n        key\n        value\n      }\n      pricing {\n        priceRange {\n          start {\n            gross {\n              amount\n              currency\n            }\n          }\n        }\n        discount {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n      category {\n        id\n        name\n        slug\n        ancestors(first: 5) {\n          edges {\n            node {\n              id\n              name\n              slug\n            }\n          }\n        }\n      }\n      collections {\n        id\n        name\n        slug\n      }\n      isAvailable\n      variants {\n        id\n        name\n        sku\n        attributes {\n          attribute {\n            name\n            slug\n          }\n          values {\n            name\n            slug\n          }\n        }\n        media {\n          url\n          alt\n          type\n        }\n        quantityAvailable\n        pricing {\n          price {\n            gross {\n              amount\n              currency\n            }\n          }\n          discount {\n            gross {\n              amount\n              currency\n            }\n          }\n        }\n      }\n      seoDescription\n      seoTitle\n    }\n  }\n": typeof types.ProductBySlugDocument,
    "\n  query GetProducts(\n    $first: Int!\n    $after: String\n    $filter: ProductFilterInput\n    $sortBy: ProductOrder\n    $channel: String!\n  ) {\n    products(\n      first: $first\n      after: $after\n      filter: $filter\n      sortBy: $sortBy\n      channel: $channel\n    ) {\n      edges {\n        node {\n          id\n          name\n          description\n          slug\n          price: pricing {\n            priceRange {\n              start {\n                gross {\n                  amount\n                  currency\n                }\n              }\n            }\n            discount {\n              gross {\n                amount\n                currency\n              }\n            }\n          }\n          thumbnail {\n            url\n            alt\n          }\n          category {\n            id\n            name\n            slug\n          }\n          isAvailable\n          metadata {\n            key\n            value\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": typeof types.GetProductsDocument,
};
const documents: Documents = {
    "\n  query ProductsExample(\n    $first: Int!\n    $after: String\n    $channel: String!\n    $filter: ProductFilterInput\n    $sortBy: ProductOrder\n  ) {\n    products(\n      first: $first\n      after: $after\n      channel: $channel\n      filter: $filter\n      sortBy: $sortBy\n    ) {\n      edges {\n        node {\n          id\n          name\n          slug\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.ProductsExampleDocument,
    "\n  mutation TokenAuth($email: String!, $password: String!) {\n    tokenCreate(email: $email, password: $password) {\n      token\n      refreshToken\n      errors {\n        field\n        message\n      }\n      user {\n        id\n        email\n        firstName\n        lastName\n        isActive\n      }\n    }\n  }\n": types.TokenAuthDocument,
    "\n  mutation RegisterAccount(\n    $input: AccountRegisterInput!\n  ) {\n    accountRegister(\n      input: $input\n    ) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        isActive\n      }\n      errors {\n        field\n        message\n        code\n      }\n    }\n  }\n": types.RegisterAccountDocument,
    "\n  query CurrentUser {\n    me {\n      id\n      email\n      firstName\n      lastName\n      isActive\n    }\n  }\n": types.CurrentUserDocument,
    "\n  query Categories($first: Int!, $channel: String!) {\n    categories(first: $first, level: 0) {\n      edges {\n        node {\n          id\n          name\n          slug\n          description\n          parent {\n            id\n          }\n          backgroundImage {\n            url\n            alt\n          }\n          children(first: 100) {\n            edges {\n              node {\n                id\n                name\n                slug\n                description\n                parent {\n                  id\n                }\n                backgroundImage {\n                  url\n                  alt\n                }\n                products(first: 0, channel: $channel) {\n                  totalCount\n                }\n              }\n            }\n            totalCount\n          }\n          products(first: 0, channel: $channel) {\n            totalCount\n          }\n        }\n      }\n      totalCount\n    }\n  }\n": types.CategoriesDocument,
    "\n  query CategoryBySlug($slug: String!, $channel: String!) {\n    category(slug: $slug) {\n      id\n      name\n      slug\n      description\n      backgroundImage {\n        url\n        alt\n      }\n      ancestors(first: 5) {\n        edges {\n          node {\n            id\n            name\n            slug\n          }\n        }\n      }\n      children(first: 100) {\n        edges {\n          node {\n            id\n            name\n            slug\n            description\n            backgroundImage {\n              url\n              alt\n            }\n            products(first: 0, channel: $channel) {\n              totalCount\n            }\n          }\n        }\n        totalCount\n      }\n      products(first: 0, channel: $channel) {\n        totalCount\n      }\n    }\n  }\n": types.CategoryBySlugDocument,
    "\n  query CategoryById($id: ID!, $channel: String!) {\n    category(id: $id) {\n      id\n      name\n      slug\n      description\n      backgroundImage {\n        url\n        alt\n      }\n      parent {\n        id\n        name\n        slug\n      }\n      children(first: 100) {\n        edges {\n          node {\n            id\n            name\n            slug\n            description\n            products(first: 0, channel: $channel) {\n              totalCount\n            }\n          }\n        }\n        totalCount\n      }\n      products(first: 0, channel: $channel) {\n        totalCount\n      }\n    }\n  }\n": types.CategoryByIdDocument,
    "\n  query GetChannel($slug: String!) {\n    channel(slug: $slug) {\n      id\n      name\n      slug\n      currencyCode\n      defaultCountry {\n        code\n        country\n      }\n    }\n  }\n": types.GetChannelDocument,
    "\n  query UserFavorites {\n    me {\n      id\n      metadata {\n        key\n        value\n      }\n    }\n  }\n": types.UserFavoritesDocument,
    "\n  mutation UpdateUserMetadata($id: ID!, $input: [MetadataInput!]!) {\n    updateMetadata(id: $id, input: $input) {\n      item {\n        ... on User {\n          id\n          metadata {\n            key\n            value\n          }\n        }\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n": types.UpdateUserMetadataDocument,
    "\n  query UserOrders($first: Int!) {\n    me {\n      orders(first: $first) {\n        edges {\n          node {\n            id\n            number\n            created\n            status\n            total {\n              gross {\n                amount\n                currency\n              }\n            }\n            lines {\n              id\n              productName\n              productSku\n              quantity\n              unitPrice {\n                gross {\n                  amount\n                  currency\n                }\n              }\n              thumbnail {\n                url\n                alt\n              }\n            }\n            shippingAddress {\n              firstName\n              lastName\n              streetAddress1\n              streetAddress2\n              city\n              countryArea\n              postalCode\n              country {\n                code\n                country\n              }\n              phone\n            }\n            paymentStatus\n            payments {\n              id\n              gateway\n              paymentMethodType\n              chargeStatus\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  }\n": types.UserOrdersDocument,
    "\n  query OrderById($id: ID!) {\n    order(id: $id) {\n      id\n      number\n      created\n      status\n      shippingAddress {\n        firstName\n        lastName\n        streetAddress1\n        streetAddress2\n        city\n        countryArea\n        postalCode\n        country {\n          code\n          country\n        }\n        phone\n      }\n      billingAddress {\n        firstName\n        lastName\n        streetAddress1\n        streetAddress2\n        city\n        countryArea\n        postalCode\n        country {\n          code\n          country\n        }\n        phone\n      }\n      total {\n        gross {\n          amount\n          currency\n        }\n      }\n      subtotal {\n        gross {\n          amount\n          currency\n        }\n      }\n      shippingPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n      payments {\n        id\n        gateway\n        paymentMethodType\n        chargeStatus\n        creditCard {\n          brand\n          lastDigits\n          expMonth\n          expYear\n        }\n      }\n      lines {\n        id\n        productName\n        variantName\n        quantity\n        thumbnail {\n          url\n          alt\n        }\n        unitPrice {\n          gross {\n            amount\n            currency\n          }\n        }\n        totalPrice {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n    }\n  }\n": types.OrderByIdDocument,
    "\n  query Products(\n    $first: Int!\n    $after: String\n    $channel: String!\n    $filter: ProductFilterInput\n    $sortBy: ProductOrder\n  ) {\n    products(\n      first: $first\n      after: $after\n      channel: $channel\n      filter: $filter\n      sortBy: $sortBy\n    ) {\n      edges {\n        node {\n          id\n          name\n          description\n          slug\n          thumbnail {\n            url\n            alt\n          }\n          pricing {\n            priceRange {\n              start {\n                gross {\n                  amount\n                  currency\n                }\n              }\n            }\n          }\n          category {\n            id\n            name\n            slug\n          }\n          attributes {\n            attribute {\n              name\n              slug\n            }\n            values {\n              name\n              slug\n            }\n          }\n          variants {\n            id\n            name\n            quantityAvailable\n            attributes {\n              attribute {\n                name\n                slug\n              }\n              values {\n                name\n                slug\n              }\n            }\n          }\n          isAvailable\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.ProductsDocument,
    "\n  query ProductById($id: ID!, $channel: String!) {\n    product(id: $id, channel: $channel) {\n      id\n      name\n      description\n      slug\n      thumbnail {\n        url\n        alt\n      }\n      media {\n        url\n        alt\n        type\n      }\n      pricing {\n        priceRange {\n          start {\n            gross {\n              amount\n              currency\n            }\n          }\n        }\n      }\n      category {\n        id\n        name\n        slug\n      }\n      attributes {\n        attribute {\n          name\n          slug\n        }\n        values {\n          name\n          slug\n        }\n      }\n      variants {\n        id\n        name\n        quantityAvailable\n        attributes {\n          attribute {\n            name\n            slug\n          }\n          values {\n            name\n            slug\n          }\n        }\n      }\n      isAvailable\n    }\n  }\n": types.ProductByIdDocument,
    "\n  query ProductBySlug($slug: String!, $channel: String!) {\n    product(slug: $slug, channel: $channel) {\n      id\n      name\n      description\n      slug\n      thumbnail {\n        url\n        alt\n      }\n      media {\n        url\n        alt\n        type\n      }\n      attributes {\n        attribute {\n          name\n          slug\n        }\n        values {\n          name\n          slug\n        }\n      }\n      metadata {\n        key\n        value\n      }\n      pricing {\n        priceRange {\n          start {\n            gross {\n              amount\n              currency\n            }\n          }\n        }\n        discount {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n      category {\n        id\n        name\n        slug\n        ancestors(first: 5) {\n          edges {\n            node {\n              id\n              name\n              slug\n            }\n          }\n        }\n      }\n      collections {\n        id\n        name\n        slug\n      }\n      isAvailable\n      variants {\n        id\n        name\n        sku\n        attributes {\n          attribute {\n            name\n            slug\n          }\n          values {\n            name\n            slug\n          }\n        }\n        media {\n          url\n          alt\n          type\n        }\n        quantityAvailable\n        pricing {\n          price {\n            gross {\n              amount\n              currency\n            }\n          }\n          discount {\n            gross {\n              amount\n              currency\n            }\n          }\n        }\n      }\n      seoDescription\n      seoTitle\n    }\n  }\n": types.ProductBySlugDocument,
    "\n  query GetProducts(\n    $first: Int!\n    $after: String\n    $filter: ProductFilterInput\n    $sortBy: ProductOrder\n    $channel: String!\n  ) {\n    products(\n      first: $first\n      after: $after\n      filter: $filter\n      sortBy: $sortBy\n      channel: $channel\n    ) {\n      edges {\n        node {\n          id\n          name\n          description\n          slug\n          price: pricing {\n            priceRange {\n              start {\n                gross {\n                  amount\n                  currency\n                }\n              }\n            }\n            discount {\n              gross {\n                amount\n                currency\n              }\n            }\n          }\n          thumbnail {\n            url\n            alt\n          }\n          category {\n            id\n            name\n            slug\n          }\n          isAvailable\n          metadata {\n            key\n            value\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n": types.GetProductsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProductsExample(\n    $first: Int!\n    $after: String\n    $channel: String!\n    $filter: ProductFilterInput\n    $sortBy: ProductOrder\n  ) {\n    products(\n      first: $first\n      after: $after\n      channel: $channel\n      filter: $filter\n      sortBy: $sortBy\n    ) {\n      edges {\n        node {\n          id\n          name\n          slug\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query ProductsExample(\n    $first: Int!\n    $after: String\n    $channel: String!\n    $filter: ProductFilterInput\n    $sortBy: ProductOrder\n  ) {\n    products(\n      first: $first\n      after: $after\n      channel: $channel\n      filter: $filter\n      sortBy: $sortBy\n    ) {\n      edges {\n        node {\n          id\n          name\n          slug\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation TokenAuth($email: String!, $password: String!) {\n    tokenCreate(email: $email, password: $password) {\n      token\n      refreshToken\n      errors {\n        field\n        message\n      }\n      user {\n        id\n        email\n        firstName\n        lastName\n        isActive\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation TokenAuth($email: String!, $password: String!) {\n    tokenCreate(email: $email, password: $password) {\n      token\n      refreshToken\n      errors {\n        field\n        message\n      }\n      user {\n        id\n        email\n        firstName\n        lastName\n        isActive\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RegisterAccount(\n    $input: AccountRegisterInput!\n  ) {\n    accountRegister(\n      input: $input\n    ) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        isActive\n      }\n      errors {\n        field\n        message\n        code\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RegisterAccount(\n    $input: AccountRegisterInput!\n  ) {\n    accountRegister(\n      input: $input\n    ) {\n      user {\n        id\n        email\n        firstName\n        lastName\n        isActive\n      }\n      errors {\n        field\n        message\n        code\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CurrentUser {\n    me {\n      id\n      email\n      firstName\n      lastName\n      isActive\n    }\n  }\n"): (typeof documents)["\n  query CurrentUser {\n    me {\n      id\n      email\n      firstName\n      lastName\n      isActive\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Categories($first: Int!, $channel: String!) {\n    categories(first: $first, level: 0) {\n      edges {\n        node {\n          id\n          name\n          slug\n          description\n          parent {\n            id\n          }\n          backgroundImage {\n            url\n            alt\n          }\n          children(first: 100) {\n            edges {\n              node {\n                id\n                name\n                slug\n                description\n                parent {\n                  id\n                }\n                backgroundImage {\n                  url\n                  alt\n                }\n                products(first: 0, channel: $channel) {\n                  totalCount\n                }\n              }\n            }\n            totalCount\n          }\n          products(first: 0, channel: $channel) {\n            totalCount\n          }\n        }\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query Categories($first: Int!, $channel: String!) {\n    categories(first: $first, level: 0) {\n      edges {\n        node {\n          id\n          name\n          slug\n          description\n          parent {\n            id\n          }\n          backgroundImage {\n            url\n            alt\n          }\n          children(first: 100) {\n            edges {\n              node {\n                id\n                name\n                slug\n                description\n                parent {\n                  id\n                }\n                backgroundImage {\n                  url\n                  alt\n                }\n                products(first: 0, channel: $channel) {\n                  totalCount\n                }\n              }\n            }\n            totalCount\n          }\n          products(first: 0, channel: $channel) {\n            totalCount\n          }\n        }\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CategoryBySlug($slug: String!, $channel: String!) {\n    category(slug: $slug) {\n      id\n      name\n      slug\n      description\n      backgroundImage {\n        url\n        alt\n      }\n      ancestors(first: 5) {\n        edges {\n          node {\n            id\n            name\n            slug\n          }\n        }\n      }\n      children(first: 100) {\n        edges {\n          node {\n            id\n            name\n            slug\n            description\n            backgroundImage {\n              url\n              alt\n            }\n            products(first: 0, channel: $channel) {\n              totalCount\n            }\n          }\n        }\n        totalCount\n      }\n      products(first: 0, channel: $channel) {\n        totalCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query CategoryBySlug($slug: String!, $channel: String!) {\n    category(slug: $slug) {\n      id\n      name\n      slug\n      description\n      backgroundImage {\n        url\n        alt\n      }\n      ancestors(first: 5) {\n        edges {\n          node {\n            id\n            name\n            slug\n          }\n        }\n      }\n      children(first: 100) {\n        edges {\n          node {\n            id\n            name\n            slug\n            description\n            backgroundImage {\n              url\n              alt\n            }\n            products(first: 0, channel: $channel) {\n              totalCount\n            }\n          }\n        }\n        totalCount\n      }\n      products(first: 0, channel: $channel) {\n        totalCount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CategoryById($id: ID!, $channel: String!) {\n    category(id: $id) {\n      id\n      name\n      slug\n      description\n      backgroundImage {\n        url\n        alt\n      }\n      parent {\n        id\n        name\n        slug\n      }\n      children(first: 100) {\n        edges {\n          node {\n            id\n            name\n            slug\n            description\n            products(first: 0, channel: $channel) {\n              totalCount\n            }\n          }\n        }\n        totalCount\n      }\n      products(first: 0, channel: $channel) {\n        totalCount\n      }\n    }\n  }\n"): (typeof documents)["\n  query CategoryById($id: ID!, $channel: String!) {\n    category(id: $id) {\n      id\n      name\n      slug\n      description\n      backgroundImage {\n        url\n        alt\n      }\n      parent {\n        id\n        name\n        slug\n      }\n      children(first: 100) {\n        edges {\n          node {\n            id\n            name\n            slug\n            description\n            products(first: 0, channel: $channel) {\n              totalCount\n            }\n          }\n        }\n        totalCount\n      }\n      products(first: 0, channel: $channel) {\n        totalCount\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetChannel($slug: String!) {\n    channel(slug: $slug) {\n      id\n      name\n      slug\n      currencyCode\n      defaultCountry {\n        code\n        country\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetChannel($slug: String!) {\n    channel(slug: $slug) {\n      id\n      name\n      slug\n      currencyCode\n      defaultCountry {\n        code\n        country\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserFavorites {\n    me {\n      id\n      metadata {\n        key\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserFavorites {\n    me {\n      id\n      metadata {\n        key\n        value\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateUserMetadata($id: ID!, $input: [MetadataInput!]!) {\n    updateMetadata(id: $id, input: $input) {\n      item {\n        ... on User {\n          id\n          metadata {\n            key\n            value\n          }\n        }\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserMetadata($id: ID!, $input: [MetadataInput!]!) {\n    updateMetadata(id: $id, input: $input) {\n      item {\n        ... on User {\n          id\n          metadata {\n            key\n            value\n          }\n        }\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query UserOrders($first: Int!) {\n    me {\n      orders(first: $first) {\n        edges {\n          node {\n            id\n            number\n            created\n            status\n            total {\n              gross {\n                amount\n                currency\n              }\n            }\n            lines {\n              id\n              productName\n              productSku\n              quantity\n              unitPrice {\n                gross {\n                  amount\n                  currency\n                }\n              }\n              thumbnail {\n                url\n                alt\n              }\n            }\n            shippingAddress {\n              firstName\n              lastName\n              streetAddress1\n              streetAddress2\n              city\n              countryArea\n              postalCode\n              country {\n                code\n                country\n              }\n              phone\n            }\n            paymentStatus\n            payments {\n              id\n              gateway\n              paymentMethodType\n              chargeStatus\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserOrders($first: Int!) {\n    me {\n      orders(first: $first) {\n        edges {\n          node {\n            id\n            number\n            created\n            status\n            total {\n              gross {\n                amount\n                currency\n              }\n            }\n            lines {\n              id\n              productName\n              productSku\n              quantity\n              unitPrice {\n                gross {\n                  amount\n                  currency\n                }\n              }\n              thumbnail {\n                url\n                alt\n              }\n            }\n            shippingAddress {\n              firstName\n              lastName\n              streetAddress1\n              streetAddress2\n              city\n              countryArea\n              postalCode\n              country {\n                code\n                country\n              }\n              phone\n            }\n            paymentStatus\n            payments {\n              id\n              gateway\n              paymentMethodType\n              chargeStatus\n            }\n          }\n        }\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query OrderById($id: ID!) {\n    order(id: $id) {\n      id\n      number\n      created\n      status\n      shippingAddress {\n        firstName\n        lastName\n        streetAddress1\n        streetAddress2\n        city\n        countryArea\n        postalCode\n        country {\n          code\n          country\n        }\n        phone\n      }\n      billingAddress {\n        firstName\n        lastName\n        streetAddress1\n        streetAddress2\n        city\n        countryArea\n        postalCode\n        country {\n          code\n          country\n        }\n        phone\n      }\n      total {\n        gross {\n          amount\n          currency\n        }\n      }\n      subtotal {\n        gross {\n          amount\n          currency\n        }\n      }\n      shippingPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n      payments {\n        id\n        gateway\n        paymentMethodType\n        chargeStatus\n        creditCard {\n          brand\n          lastDigits\n          expMonth\n          expYear\n        }\n      }\n      lines {\n        id\n        productName\n        variantName\n        quantity\n        thumbnail {\n          url\n          alt\n        }\n        unitPrice {\n          gross {\n            amount\n            currency\n          }\n        }\n        totalPrice {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query OrderById($id: ID!) {\n    order(id: $id) {\n      id\n      number\n      created\n      status\n      shippingAddress {\n        firstName\n        lastName\n        streetAddress1\n        streetAddress2\n        city\n        countryArea\n        postalCode\n        country {\n          code\n          country\n        }\n        phone\n      }\n      billingAddress {\n        firstName\n        lastName\n        streetAddress1\n        streetAddress2\n        city\n        countryArea\n        postalCode\n        country {\n          code\n          country\n        }\n        phone\n      }\n      total {\n        gross {\n          amount\n          currency\n        }\n      }\n      subtotal {\n        gross {\n          amount\n          currency\n        }\n      }\n      shippingPrice {\n        gross {\n          amount\n          currency\n        }\n      }\n      payments {\n        id\n        gateway\n        paymentMethodType\n        chargeStatus\n        creditCard {\n          brand\n          lastDigits\n          expMonth\n          expYear\n        }\n      }\n      lines {\n        id\n        productName\n        variantName\n        quantity\n        thumbnail {\n          url\n          alt\n        }\n        unitPrice {\n          gross {\n            amount\n            currency\n          }\n        }\n        totalPrice {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Products(\n    $first: Int!\n    $after: String\n    $channel: String!\n    $filter: ProductFilterInput\n    $sortBy: ProductOrder\n  ) {\n    products(\n      first: $first\n      after: $after\n      channel: $channel\n      filter: $filter\n      sortBy: $sortBy\n    ) {\n      edges {\n        node {\n          id\n          name\n          description\n          slug\n          thumbnail {\n            url\n            alt\n          }\n          pricing {\n            priceRange {\n              start {\n                gross {\n                  amount\n                  currency\n                }\n              }\n            }\n          }\n          category {\n            id\n            name\n            slug\n          }\n          attributes {\n            attribute {\n              name\n              slug\n            }\n            values {\n              name\n              slug\n            }\n          }\n          variants {\n            id\n            name\n            quantityAvailable\n            attributes {\n              attribute {\n                name\n                slug\n              }\n              values {\n                name\n                slug\n              }\n            }\n          }\n          isAvailable\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query Products(\n    $first: Int!\n    $after: String\n    $channel: String!\n    $filter: ProductFilterInput\n    $sortBy: ProductOrder\n  ) {\n    products(\n      first: $first\n      after: $after\n      channel: $channel\n      filter: $filter\n      sortBy: $sortBy\n    ) {\n      edges {\n        node {\n          id\n          name\n          description\n          slug\n          thumbnail {\n            url\n            alt\n          }\n          pricing {\n            priceRange {\n              start {\n                gross {\n                  amount\n                  currency\n                }\n              }\n            }\n          }\n          category {\n            id\n            name\n            slug\n          }\n          attributes {\n            attribute {\n              name\n              slug\n            }\n            values {\n              name\n              slug\n            }\n          }\n          variants {\n            id\n            name\n            quantityAvailable\n            attributes {\n              attribute {\n                name\n                slug\n              }\n              values {\n                name\n                slug\n              }\n            }\n          }\n          isAvailable\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProductById($id: ID!, $channel: String!) {\n    product(id: $id, channel: $channel) {\n      id\n      name\n      description\n      slug\n      thumbnail {\n        url\n        alt\n      }\n      media {\n        url\n        alt\n        type\n      }\n      pricing {\n        priceRange {\n          start {\n            gross {\n              amount\n              currency\n            }\n          }\n        }\n      }\n      category {\n        id\n        name\n        slug\n      }\n      attributes {\n        attribute {\n          name\n          slug\n        }\n        values {\n          name\n          slug\n        }\n      }\n      variants {\n        id\n        name\n        quantityAvailable\n        attributes {\n          attribute {\n            name\n            slug\n          }\n          values {\n            name\n            slug\n          }\n        }\n      }\n      isAvailable\n    }\n  }\n"): (typeof documents)["\n  query ProductById($id: ID!, $channel: String!) {\n    product(id: $id, channel: $channel) {\n      id\n      name\n      description\n      slug\n      thumbnail {\n        url\n        alt\n      }\n      media {\n        url\n        alt\n        type\n      }\n      pricing {\n        priceRange {\n          start {\n            gross {\n              amount\n              currency\n            }\n          }\n        }\n      }\n      category {\n        id\n        name\n        slug\n      }\n      attributes {\n        attribute {\n          name\n          slug\n        }\n        values {\n          name\n          slug\n        }\n      }\n      variants {\n        id\n        name\n        quantityAvailable\n        attributes {\n          attribute {\n            name\n            slug\n          }\n          values {\n            name\n            slug\n          }\n        }\n      }\n      isAvailable\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ProductBySlug($slug: String!, $channel: String!) {\n    product(slug: $slug, channel: $channel) {\n      id\n      name\n      description\n      slug\n      thumbnail {\n        url\n        alt\n      }\n      media {\n        url\n        alt\n        type\n      }\n      attributes {\n        attribute {\n          name\n          slug\n        }\n        values {\n          name\n          slug\n        }\n      }\n      metadata {\n        key\n        value\n      }\n      pricing {\n        priceRange {\n          start {\n            gross {\n              amount\n              currency\n            }\n          }\n        }\n        discount {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n      category {\n        id\n        name\n        slug\n        ancestors(first: 5) {\n          edges {\n            node {\n              id\n              name\n              slug\n            }\n          }\n        }\n      }\n      collections {\n        id\n        name\n        slug\n      }\n      isAvailable\n      variants {\n        id\n        name\n        sku\n        attributes {\n          attribute {\n            name\n            slug\n          }\n          values {\n            name\n            slug\n          }\n        }\n        media {\n          url\n          alt\n          type\n        }\n        quantityAvailable\n        pricing {\n          price {\n            gross {\n              amount\n              currency\n            }\n          }\n          discount {\n            gross {\n              amount\n              currency\n            }\n          }\n        }\n      }\n      seoDescription\n      seoTitle\n    }\n  }\n"): (typeof documents)["\n  query ProductBySlug($slug: String!, $channel: String!) {\n    product(slug: $slug, channel: $channel) {\n      id\n      name\n      description\n      slug\n      thumbnail {\n        url\n        alt\n      }\n      media {\n        url\n        alt\n        type\n      }\n      attributes {\n        attribute {\n          name\n          slug\n        }\n        values {\n          name\n          slug\n        }\n      }\n      metadata {\n        key\n        value\n      }\n      pricing {\n        priceRange {\n          start {\n            gross {\n              amount\n              currency\n            }\n          }\n        }\n        discount {\n          gross {\n            amount\n            currency\n          }\n        }\n      }\n      category {\n        id\n        name\n        slug\n        ancestors(first: 5) {\n          edges {\n            node {\n              id\n              name\n              slug\n            }\n          }\n        }\n      }\n      collections {\n        id\n        name\n        slug\n      }\n      isAvailable\n      variants {\n        id\n        name\n        sku\n        attributes {\n          attribute {\n            name\n            slug\n          }\n          values {\n            name\n            slug\n          }\n        }\n        media {\n          url\n          alt\n          type\n        }\n        quantityAvailable\n        pricing {\n          price {\n            gross {\n              amount\n              currency\n            }\n          }\n          discount {\n            gross {\n              amount\n              currency\n            }\n          }\n        }\n      }\n      seoDescription\n      seoTitle\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetProducts(\n    $first: Int!\n    $after: String\n    $filter: ProductFilterInput\n    $sortBy: ProductOrder\n    $channel: String!\n  ) {\n    products(\n      first: $first\n      after: $after\n      filter: $filter\n      sortBy: $sortBy\n      channel: $channel\n    ) {\n      edges {\n        node {\n          id\n          name\n          description\n          slug\n          price: pricing {\n            priceRange {\n              start {\n                gross {\n                  amount\n                  currency\n                }\n              }\n            }\n            discount {\n              gross {\n                amount\n                currency\n              }\n            }\n          }\n          thumbnail {\n            url\n            alt\n          }\n          category {\n            id\n            name\n            slug\n          }\n          isAvailable\n          metadata {\n            key\n            value\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query GetProducts(\n    $first: Int!\n    $after: String\n    $filter: ProductFilterInput\n    $sortBy: ProductOrder\n    $channel: String!\n  ) {\n    products(\n      first: $first\n      after: $after\n      filter: $filter\n      sortBy: $sortBy\n      channel: $channel\n    ) {\n      edges {\n        node {\n          id\n          name\n          description\n          slug\n          price: pricing {\n            priceRange {\n              start {\n                gross {\n                  amount\n                  currency\n                }\n              }\n            }\n            discount {\n              gross {\n                amount\n                currency\n              }\n            }\n          }\n          thumbnail {\n            url\n            alt\n          }\n          category {\n            id\n            name\n            slug\n          }\n          isAvailable\n          metadata {\n            key\n            value\n          }\n        }\n      }\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n      totalCount\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;