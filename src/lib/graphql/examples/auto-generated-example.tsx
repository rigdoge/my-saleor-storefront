'use client'

import { useQuery, useMutation } from '@tanstack/react-query'
import { gql } from 'graphql-request'
import { useChannel } from '@/components/providers/channel-provider'

// 这是手动定义的查询
const PRODUCTS_EXAMPLE_QUERY = gql`
  query ProductsExample(
    $first: Int!
    $after: String
    $channel: String!
    $filter: ProductFilterInput
    $sortBy: ProductOrder
  ) {
    products(
      first: $first
      after: $after
      channel: $channel
      filter: $filter
      sortBy: $sortBy
    ) {
      edges {
        node {
          id
          name
          slug
        }
      }
      pageInfo {
        hasNextPage
        endCursor
      }
      totalCount
    }
  }
`

// 导入自动生成的 hooks
// 注意：这些 hooks 将在运行 npm run generate 后生成
// import { useProductsQuery } from '@/lib/graphql/__generated__/types'

export function ProductListExample() {
  const { currentChannel } = useChannel()
  
  // 使用手动方式查询
  const { data, isLoading, error } = useQuery({
    queryKey: ['products', currentChannel.slug],
    queryFn: async () => {
      // 这里将来会替换为自动生成的 hook
      // return useProductsQuery({
      //   first: 10,
      //   channel: currentChannel.slug,
      // })
      
      // 手动方式
      const response = await fetch('/api/graphql', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          query: PRODUCTS_EXAMPLE_QUERY,
          variables: {
            first: 10,
            channel: currentChannel.slug,
          },
        }),
      })
      
      return response.json()
    },
  })
  
  if (isLoading) return <div>加载中...</div>
  if (error) return <div>加载失败: {error.toString()}</div>
  
  return (
    <div>
      <h2>商品列表</h2>
      <ul>
        {data?.products?.edges.map(({ node }: { node: any }) => (
          <li key={node.id}>{node.name}</li>
        ))}
      </ul>
    </div>
  )
}

// 使用自动生成的代码的示例（注释掉，等代码生成后再使用）
/*
export function ProductListAutoGenerated() {
  const { currentChannel } = useChannel()
  
  // 使用自动生成的 hook
  const { data, isLoading, error } = useProductsQuery({
    first: 10,
    channel: currentChannel.slug,
  })
  
  if (isLoading) return <div>加载中...</div>
  if (error) return <div>加载失败: {error.toString()}</div>
  
  return (
    <div>
      <h2>商品列表 (自动生成)</h2>
      <ul>
        {data?.products?.edges.map(({ node }) => (
          <li key={node.id}>{node.name}</li>
        ))}
      </ul>
    </div>
  )
}
*/ 